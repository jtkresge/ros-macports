#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
A simple script to take a set of packages in a ROS workspace and conver them
into a set of macports ports with a fully working dependency tree.
"""

import os
import argparse
import shutil
from xml.dom import minidom as xml


def readfile(file):
    with open(file) as f:
        return "".join(f.readlines())


def writefile(fname, data):
    with open(fname, "w") as f:
        f.write(data)


def parseargs():
    parser = argparse.ArgumentParser()
    parser.add_argument("--rosinstall",
                        help="the rosinstall file which specifies what ports" \
                             "to generate",
                        required=True)
    parser.add_argument("--system-deps",
                        help="a YAML file mapping ros-named system" \
                             "dependencies to macports port names. This is" \
                             "generated by system_dependency_generator",
                        required=True)
    parser.add_argument("--port-dir",
                        help="the directory for the generated ports. if not " \
                             "specified, defaults to ../ports",
                        default="../ports")
    parser.add_argument("--force-download",
                        help="force redownload, even if cache exists",
                        action="store_true")
    return parser.parse_args()


def download_workspace(rosinstalldir, cachedir):
    if not os.path.exists(cachedir):
        os.mkdir(cachedir)
    os.system("./rosports_downloader --rosinstall " + rosinstalldir +
              " --workspace " + cachedir)


def extract_workspace(cachedir):
    pkgdirs = [pkgdir for pkgdir in os.listdir(cachedir) if
               not pkgdir.startswith(".") and os.path.isdir(
                   cachedir + "/" + pkgdir)]
    for pkgdir in pkgdirs:
        if os.path.exists(cachedir + "/" + pkgdir):
            shutil.rmtree(cachedir + "/" + pkgdir)

    pkgs = [pkg for pkg in os.listdir(cachedir) if
            not pkg.startswith(".") and not os.path.isdir(pkg)]
    for pkg in pkgs:
        print "Extracting ", pkg
        os.system("tar -zxvf {0} -C {1}".format(cachedir + "/" +
                                                pkg, cachedir))


if __name__ == "__main__":

    args = parseargs()

    prefix = "ros-hydro-"
    portdir = args.port_dir
    force_download = args.force_download
    sysdepsdir = args.system_deps
    rosinstalldir = args.rosinstall
    cachedir = "cache"

    if os.path.exists(cachedir) and not force_download:
        print("Warning: not redownloading workspace, cache exists.")
    if os.path.exists(cachedir) and force_download:
        shutil.rmtree(cachedir)
    if not os.path.exists(cachedir):
        download_workspace(rosinstalldir, cachedir)

    extract_workspace(cachedir)

    pkgs = [pkg for pkg in os.listdir(cachedir) if
            not pkg.startswith(".") and os.path.isdir(pkg)]

    for pkg in pkgs:
        manifest = xml.parse(cachedir + pkg + "/package.xml")
        pkgname = prefix + pkg #todo: fix pkg here to be the parsed one from xml
        build_deps = [prefix + ele.lastChild.nodeValue for ele in
                      manifest.getElementsByTagName("build_depend")]
        if pkg != "catkin":
            build_deps.append(prefix + "catkin")
        build_deps_str = " \\\n                    port:".join(build_deps)
        if build_deps_str is not "":
            build_deps_str = "\\\n                    port:" + build_deps_str
        run_deps = [prefix + ele.lastChild.nodeValue for ele in
                    manifest.getElementsByTagName("run_depend")]
        run_deps_str = " \\\n                    port:".join(run_deps)
        if run_deps_str is not "":
            run_deps_str = "\\\n                    port:" + run_deps_str
        print (pkgname + " run_depends: " + run_deps_str)
        print (pkgname + " build_depends: " + build_deps_str)

        template = readfile("Portfile-template")
        template = template.replace("$$fullname$$", pkgname)
        template = template.replace("$$name$$", pkg)
        template = template.replace("$$run_depends$$", run_deps_str)
        template = template.replace("$$build_depends$$", build_deps_str)

        # Make ports
        if not os.path.exists(portdir):
            os.mkdir(portdir)
        if not os.path.exists(portdir + "/" + pkgname):
            os.mkdir(portdir + "/" + pkgname)
        writefile(portdir + "/" + pkgname + "/Portfile", template)
